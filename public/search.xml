<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>xpath</title>
      <link href="/2020/01/07/path/"/>
      <url>/2020/01/07/path/</url>
      
        <content type="html"><![CDATA[<h6 id="1-xpath语法"><a href="#1-xpath语法" class="headerlink" title="1. xpath语法"></a>1. xpath语法</h6><p>最有用的路径表达式：</p><table><thead><tr><th>表达式</th><th align="center">描述</th></tr></thead><tbody><tr><td>nodename</td><td align="center">选取此节点的所有子节点。</td></tr><tr><td>/</td><td align="center">从根节点选取。</td></tr><tr><td>//</td><td align="center">从匹配选择的当前节点选择文档中的节点，而不考虑它们的位置。</td></tr><tr><td>.</td><td align="center">选取当前节点。</td></tr><tr><td>..</td><td align="center">选取当前节点的父节点。</td></tr><tr><td>@</td><td align="center">选取属性。</td></tr></tbody></table><a id="more"></a><table><thead><tr><th align="left">路径表达式</th><th align="left">结果</th></tr></thead><tbody><tr><td align="left">/bookstore/book[1]</td><td align="left">选取属于 bookstore 子元素的第一个 book 元素。</td></tr><tr><td align="left">/bookstore/book[last()]</td><td align="left">选取属于 bookstore 子元素的最后一个 book 元素。</td></tr><tr><td align="left">/bookstore/book[last()-1]</td><td align="left">选取属于 bookstore 子元素的倒数第二个 book 元素。</td></tr><tr><td align="left">/bookstore/book[position()&lt;3]</td><td align="left">选取最前面的两个属于 bookstore 元素的子元素的 book 元素。</td></tr><tr><td align="left">//title[@lang]</td><td align="left">选取所有拥有名为 lang 的属性的 title 元素。</td></tr><tr><td align="left">//title[@lang=’eng’]</td><td align="left">选取所有 title 元素，且这些元素拥有值为 eng 的 lang 属性。</td></tr><tr><td align="left">/bookstore/book[price&gt;35.00]</td><td align="left">选取 bookstore 元素的所有 book 元素，且其中的 price 元素的值须大于 35.00。</td></tr><tr><td align="left">/bookstore/book[price&gt;35.00]/title</td><td align="left">选取 bookstore 元素中的 book 元素的所有 title 元素，且其中的 price 元素的值须大于 35.00。</td></tr></tbody></table><h6 id="2-节点轴的选择"><a href="#2-节点轴的选择" class="headerlink" title="2. 节点轴的选择"></a>2. 节点轴的选择</h6><p>详见 <a href="https://www.w3school.com.cn/xpath/xpath_axes.asp" target="_blank" rel="noopener">w3c</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">html = etree.HTML(text)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">result = html.xpath(<span class="string">'//li[1]/ancestor::*'</span>)  <span class="comment"># 所有祖先节点</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">result = html.xpath(<span class="string">'//li[1]/ancestor::div'</span>)  <span class="comment"># 祖先节点当中，是div的那些节点</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">result = html.xpath(<span class="string">'//li[1]/attribute::*'</span>)  <span class="comment"># 获取所有属性的值</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">result = html.xpath(<span class="string">'//li[1]/child::a[@href]'</span>)  <span class="comment"># child  直接自节点</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">result = html.xpath(<span class="string">'//li[1]/descendant::span'</span>)  <span class="comment"># descendant  所有子孙节点</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">result = html.xpath(<span class="string">'//li[1]/following::*[2]'</span>)  <span class="comment"># following 获取当前节点的所有节点，包括不同同级的</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">result = html.xpath(<span class="string">'//li[1]/following-sibling::*'</span>) <span class="comment"># following 获取当前节点的所有同级节点</span></span></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> xpath </tag>
            
            <tag> 爬虫 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>正则表达式</title>
      <link href="/2020/01/06/%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
      <url>/2020/01/06/%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<p>匹配一次结束：</p><ul><li>re.match() 从头匹配，若开头匹配不到，则失败</li><li>re.search() 不从头匹配</li></ul><hr><p>匹配多次</p><ul><li>re.findall(),找出所有符合条件的内容，放回一个列表<a id="more"></a></li><li>re.sub([匹配字符]，[替换字符]，[查找的字符串])，替换掉所有符合条件的内容，返回一个字符串</li><li>re.split(),分割字符串，返回列表</li></ul><p>re.complie(),写入常用匹配字符串，提高效率</p><p><img src="/images/pasted-26.png" alt="upload successful"></p><hr><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">result = re.match(<span class="string">'.*?(\d+).*?(\d+)'</span>,<span class="string">'xaxsax99xsaxsa55'</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">result.group()等价于result.group(<span class="number">0</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">result.group(<span class="number">1</span>)是第一个括号（子组）的内容,即<span class="number">99</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">result.groups()返回所有的子组，从<span class="number">1</span>开始</span></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>json</title>
      <link href="/2020/01/06/json/"/>
      <url>/2020/01/06/json/</url>
      
        <content type="html"><![CDATA[<p>json.loads:字符串转dict对象</p><p>json.dumps：dict对象转字符串</p><p>json.load：文件对象转python dict对象</p><p><img src="/images/pasted-24.png" alt="upload successful"></p><p>json.dump：保存dict对象为文件对象</p><p><img src="/images/pasted-25.png" alt="upload successful"></p><p>ensure_ascii= False：不自动转ascii码</p><p>indent = 2，格式化空两格</p>]]></content>
      
      
      
        <tags>
            
            <tag> json </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>django-Hatstack全文搜索引擎</title>
      <link href="/2020/01/04/jango-Hatstack%E5%85%A8%E6%96%87%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E/"/>
      <url>/2020/01/04/jango-Hatstack%E5%85%A8%E6%96%87%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E/</url>
      
        <content type="html"><![CDATA[<p>Django3中django-haystack ，巨坑</p><p>报错</p><p><img src="/images/pasted-22.png" alt="upload successful"></p><p>报 cannot import name six 原因是django3中django/utils目录下的six.py文件已被移除，可自己从别的地方导入six.py文件</p><p>再次运行后依旧报错：</p><a id="more"></a><p><img src="/images/pasted-23.png" alt="upload successful"></p><p>cannot import name ‘python_2_unicode_compatible’</p><p>原因是’python_2_unicode_compatible’ 功能仅在Django 1.5版本中添加。</p><p>可修改…/haystack/utils/<strong>init</strong>.py文件：</p><p>尝试</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.utils.six <span class="keyword">import</span> python_2_unicode_compatible</span></pre></td></tr></table></figure><p>代替</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.utils.encoding <span class="keyword">import</span> python_2_unicode_compatible</span></pre></td></tr></table></figure><p>事实证明自己动手丰衣足食</p>]]></content>
      
      
      
        <tags>
            
            <tag> django </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>爬虫</title>
      <link href="/2020/01/02/%E8%99%AB/"/>
      <url>/2020/01/02/%E8%99%AB/</url>
      
        <content type="html"><![CDATA[<p>长连接：Connection:keep-alive</p><p>accept-language:zh-CN,zh;q=0.9</p><p>q代表权重，访问可能性为0.9</p><p>http协议基于tcp协议，三次握手四次断开</p><h5 id="响应状态码"><a href="#响应状态码" class="headerlink" title="响应状态码"></a>响应状态码</h5><p>响应状态代码有三位数字组成，第一个数字定义了响应的类别，且有五种可能取值。</p><a id="more"></a><h6 id="常见"><a href="#常见" class="headerlink" title="常见"></a>常见</h6><ul><li>100~199：表示服务器成功接收部分请求，要求客户端继续提交其余请才能完成整个处理过程。</li><li>200~299：表示服务器成功接收请求并已完成整个处理过程。常用200（OK请求成功）。</li><li>300~399：为完成请求，客户需进一步细化请求。例如：请求的资源已移动一个新地址、常用302（所请求的页面已经临时转移至新的url）、307和304（使用缓存资源）。</li><li>400~499：客户端的请求有错误，常用404（服务器无法找到被请求的面）、403（服务器拒绝访问，权限不够）。</li><li>500~599：服务器端出现错误，常用500（请求未完成。服务器遇到不可知的情况）。</li></ul><p>200：请求成功</p><p>302、304、307：使用缓存资源</p><p>403、404：常用404（服务器无法找到被请求的页面）、403（服务器拒绝访问，权限不够）。</p><p>500：请求未完成。服务器遇到不可预知的情况</p><p>from retrying import retry</p><p>@retry(stop_max_attempt_number = 3)<br>类似于装饰器用法，=号后是尝试请求的次数</p>]]></content>
      
      
      
        <tags>
            
            <tag> 爬虫 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git分布式版本控制系统</title>
      <link href="/2019/12/30/git%E5%88%86%E5%B8%83%E5%BC%8F%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6%E7%B3%BB%E7%BB%9F/"/>
      <url>/2019/12/30/git%E5%88%86%E5%B8%83%E5%BC%8F%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6%E7%B3%BB%E7%BB%9F/</url>
      
        <content type="html"><![CDATA[<h5 id="1-创建版本库"><a href="#1-创建版本库" class="headerlink" title="1. 创建版本库"></a>1. 创建版本库</h5><p>git init初始化</p><h5 id="2-版本创建与回退"><a href="#2-版本创建与回退" class="headerlink" title="2. 版本创建与回退"></a>2. 版本创建与回退</h5><p>git add file 提交到暂存区</p><p>git commit -m ‘(版本说明)’ 提交到当前分支</p><p>git status 查看当前⼯作树的状态</p><p>文件颜色代表：红色工作区，绿色暂存区</p><p>git log 查看版本记录</p><p>git reset &#45;&#45;hard HEAD^ 回退上一个版本</p><a id="more"></a><p>(…HEAD后的上三角代表回退几个版本，也可以使⽤HEAD&#126;1 表示当前版本的前⼀个版本,HEAD&#126;100 表示当前版本的前100版本，也可使用git reset –hard 版本号,支持链式操作，如：git checkout HEAD<del>^2</del>2,^后可以接数字，代表回退到第几个父节点)</p><p>git revert -n 版本号 反做某一版本(取消此版本的操作,大概意思)，生成新的版本号(或适用于远程分支[多人协作]修改)</p><p>git reflog 查看操作记录</p><p>git checkout &#45;&#45; file  撤销工作区操作</p><p>git reset HEAD file 撤销暂存区修改，重新放回⼯作区。</p><p>git cherry-pick [版本号]（可以多个） 整理提交记录</p><p>git rebase -i (branch or HEAD~) 复制记录，生成新分支</p><p>git tag [name] A结点  将A结点命名为name的锚点，可以commit提交到锚点</p><p>git describe [ref]  可以是任何能被 Git 识别成提交记录的引用，如果你没有指定的话，Git 会以你目前所检出的位置（HEAD）。</p><p>它输出的结果是这样的：</p><p>&#60;tag&#62;_&#60;numCommits&#62;_g&#60;hash&#62;</p><p>tag 表示的是离 ref 最近的标签， numCommits 是表示这个 ref 与 tag 相差有多少个提交记录， hash 表示的是你所给定的 ref 所表示的提交记录哈希值的前几位。</p><p>当 ref 提交记录上有某个标签时，则只输出标签名称</p><h6 id="2-1-工作区和暂存区"><a href="#2-1-工作区和暂存区" class="headerlink" title="2.1 工作区和暂存区"></a>2.1 工作区和暂存区</h6><p>⼯作区(Working Directory)</p><p>电脑中的⽬录，⽐如我们的git_test，就是⼀个⼯作区。</p><p>版本库(Repository)</p><p>⼯作区有⼀个隐藏⽬录.git，这个不是⼯作区，⽽是git的版本库。git的版本库⾥存了很多东⻄，其中最重要的就是称为stage(或者叫index)的暂存区，还有git为我们⾃动创建的第⼀个分⽀master，以及指向master的⼀个指针叫HEAD。</p><p><img src="/images/pasted-9.png" alt="upload successful"></p><h6 id="2-2-撤销操作"><a href="#2-2-撤销操作" class="headerlink" title="2.2 撤销操作"></a>2.2 撤销操作</h6><p>⼩结：</p><p>场景1：当你改乱了⼯作区某个⽂件的内容，想直接丢弃⼯作区的修改时，⽤命令git checkout – file。</p><p>场景2：当你不但改乱了⼯作区某个⽂件的内容，还添加到了暂存区时，想丢弃修改，分两步，第⼀步⽤命令git reset HEAD file，就回到了场景1，第⼆步按场景1操作。</p><p>场景3：已经提交了不合适的修改到版本库时，想要撤销本次提交，参考版本回退⼀节。</p><h6 id="2-3-对⽐⽂件的不同"><a href="#2-3-对⽐⽂件的不同" class="headerlink" title="2.3 对⽐⽂件的不同"></a>2.3 对⽐⽂件的不同</h6><p>git diff 版本（a） &#45;&#45;file（b） 对比版本和工作区file的不同</p><p><img src="/images/pasted-10.png" alt="upload successful"></p><p>&#45;&#45;&#45;a 代表版本</p><p>+++b 代表file</p><p>对⽐两个版本间⽂件的不同：</p><p>git diff 版本（HEAD）版本（HEAD） –file</p><h5 id="3-删除文件"><a href="#3-删除文件" class="headerlink" title="3. 删除文件"></a>3. 删除文件</h5><p>rm file</p><p>gitstatus命令会⽴刻提示哪些⽂件被删除了。</p><p>现在你有两个选择，⼀是确实要从版本库中删除该⽂件，那就⽤命令git rm删掉，并且git commit;</p><p>另⼀种情况是删错了，可以直接使⽤git checkout &#45;&#45;code2.txt,这样⽂件code2.txt⼜回来了。</p><h5 id="4-分支管理"><a href="#4-分支管理" class="headerlink" title="4. 分支管理"></a>4. 分支管理</h5><h6 id="4-1-创建与合并分⽀"><a href="#4-1-创建与合并分⽀" class="headerlink" title="4.1 创建与合并分⽀"></a>4.1 创建与合并分⽀</h6><p>在git⾥，这个分⽀叫主分⽀，即master分⽀。HEAD严格来说不是指向提交，⽽是指向master，master才是指向提交的，所以，HEAD指向的就是当前分⽀。</p><p>例：<br><img src="/images/pasted-11.png" alt="upload successful"></p><p>当我们创建新的分⽀，例如dev时，git新建了⼀个指针叫dev，指向master相同的提交，再把HEAD指向dev，就表示当前分⽀在dev上：</p><p><img src="/images/pasted-12.png" alt="upload successful"></p><p>git创建⼀个分⽀很快，因为除了增加⼀个dev指针，改变HEAD的指向，⼯作区的⽂件都没有任何变化。</p><p><img src="/images/pasted-13.png" alt="upload successful"></p><p>⼩结：</p><p>查看分⽀：git branch</p><p>创建分⽀：git branch [name]</p><p>切换分⽀：git checkout [name]</p><p>创建+切换分⽀：git checkout -b [name]</p><p>合并某分⽀到当前分⽀：git merge [name]</p><p>删除分⽀：git branch -d [name]</p><p>查看分支合并情况：git log &#45;&#45;graph &#45;&#45;pretty=oneline</p><p>移动branch1分支到branch2上: git branch -f [branch1]  [branch2]</p><h6 id="4-2-解决分支冲突"><a href="#4-2-解决分支冲突" class="headerlink" title="4.2 解决分支冲突"></a>4.2 解决分支冲突</h6><p>分支冲突后，git会⽤&lt;&lt;&lt;&lt;&lt;&lt;&lt;，=======，&gt;&gt;&gt;&gt;&gt;&gt;&gt;标记出不同分⽀的内容，例：</p><p><img src="/images/pasted-14.png" alt="upload successful"></p><p>删除标记后再git add [name] ,git commit ,git merge [分支]</p><h6 id="4-3-分⽀管理策略"><a href="#4-3-分⽀管理策略" class="headerlink" title="4.3 分⽀管理策略"></a>4.3 分⽀管理策略</h6><p>通常，合并分⽀时，如果可能，git会⽤fast forward模式</p><p><img src="/images/pasted-15.png" alt="upload successful"></p><p>&#45;&#45;no&#45;ff 禁用快速合并,生成如图no ff 结点，fast forword 不生成结点</p><h6 id="4-4-Bug分⽀"><a href="#4-4-Bug分⽀" class="headerlink" title="4.4 Bug分⽀"></a>4.4 Bug分⽀</h6><p>stash在英文意思是隐藏。它的作用也是隐藏没完成的代码，防止它干扰 别人 或者 新分支的工作。</p><table><thead><tr><th>姓名</th><th align="left">技能</th></tr></thead><tbody><tr><td>git stash</td><td align="left">隐藏当前的工作现场, 此时, git status的结果是 clean</td></tr><tr><td>git stash list</td><td align="left">查看所有隐藏, 每一行的冒号前面的字符串就是标识此隐藏的id</td></tr><tr><td>git stash apply <id></td><td align="left">重新显示标识为 id 的隐藏</td></tr><tr><td>git stash drop <id>    git apply</td><td align="left">恢复隐藏后, 需要手动删除 list 列表中的记录</td></tr><tr><td>git stash pop</td><td align="left">Apply last stash and remove it from the list</td></tr></tbody></table><p>⼩结：</p><p>修复bug时，我们会通过创建新的bug分⽀进⾏修复，然后合并，最后删除；当⼿头⼯作没有完成时，先把⼯作现场git stash⼀下，然后去修复bug，修复后，再git stash pop，恢复⼯作现场。</p><h5 id="5-远程仓库"><a href="#5-远程仓库" class="headerlink" title="5. 远程仓库"></a>5. 远程仓库</h5><p>克隆远程仓库：git clone (地址)</p><p>拉取远程仓库(默认merge，拉过来合并生成新结点)：git pull （地址 or 定义的远程仓库名）（分支名）</p><p><img src="/images/pasted-18.png" alt="upload successful"></p><hr><p>通过rebase方式拉取(生成一条线，记录干净)：git pull –rebase</p><p><img src="/images/pasted-19.png" alt="upload successful"></p><hr><p>推送本地仓库到远程仓库上：git push (地址 or 定义的远程仓库名）（分支名）</p><p>添加发布者的远程仓库：git remote add upstream (地址)</p><p>查看远程仓库： git remote -v</p><p>分支跟踪远程仓库：</p><ol><li>git checkout -b [分支名] [远程名]/[分支名]，例<br>git checkout -b foo origin/master </li><li>git branch -u [远程名]/[分支名] [分支名]，例<br>git branch -u origin/master foo</li></ol><p>自己的远程仓库为origin，发布者的远程仓库一般命名为upstream</p>]]></content>
      
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>django_filters</title>
      <link href="/2019/12/25/django-filters/"/>
      <url>/2019/12/25/django-filters/</url>
      
        <content type="html"><![CDATA[<h6 id="django前端页面注释"><a href="#django前端页面注释" class="headerlink" title="django前端页面注释"></a>django前端页面注释</h6><p>单行注释</p><p>&#123; # # &#125;</p><p>多行注释</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">&#123;% comment %&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">...</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">...</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">&#123;% endcomment %&#125;</span></pre></td></tr></table></figure><a id="more"></a><p>过滤器safe：禁用转义，告诉模板这个变量是安全的，可以解释执行。</p><p><code></code></p><p>标签autoescape：设置一段代码都禁用转义，接受on、off参数。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">&#123;%autoescape off%&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">...</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">&#123;%endautoescape%&#125;</span></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> django </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>django AJAX</title>
      <link href="/2019/12/24/django-AJAX/"/>
      <url>/2019/12/24/django-AJAX/</url>
      
        <content type="html"><![CDATA[<h4 id="window-location-href-is-not-a-function错误解决"><a href="#window-location-href-is-not-a-function错误解决" class="headerlink" title="window.location.href is not a function错误解决"></a>window.location.href is not a function错误解决</h4><h6 id="js报错：window-location-href-is-not-a-function是由于写法问题以及浏览器不兼容导致的，具体解决方法如下："><a href="#js报错：window-location-href-is-not-a-function是由于写法问题以及浏览器不兼容导致的，具体解决方法如下：" class="headerlink" title="js报错：window.location.href is not a function是由于写法问题以及浏览器不兼容导致的，具体解决方法如下："></a>js报错：window.location.href is not a function是由于写法问题以及浏览器不兼容导致的，具体解决方法如下：</h6><p>错误js写法：</p><p><code>window.location.href (&quot;http://www.baidu.com/&quot;);</code></p><p>正确js写法：</p><p><code>window.location.href = &quot;http://www.baidu.com/&quot;;</code></p><h6 id="上面的正确js写法可以兼容绝大部分浏览器，但是在某些版本的firefox浏览器下仍然可能报错，解决办法是采用下面的写法："><a href="#上面的正确js写法可以兼容绝大部分浏览器，但是在某些版本的firefox浏览器下仍然可能报错，解决办法是采用下面的写法：" class="headerlink" title="上面的正确js写法可以兼容绝大部分浏览器，但是在某些版本的firefox浏览器下仍然可能报错，解决办法是采用下面的写法："></a>上面的正确js写法可以兼容绝大部分浏览器，但是在某些版本的firefox浏览器下仍然可能报错，解决办法是采用下面的写法：</h6><p><code>window.location = &quot;http://www.baidu.com/&quot;;</code></p>]]></content>
      
      
      
        <tags>
            
            <tag> django </tag>
            
            <tag> ajax </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Djnago</title>
      <link href="/2019/12/20/Djnago/"/>
      <url>/2019/12/20/Djnago/</url>
      
        <content type="html"><![CDATA[<h5 id="1-URL配置"><a href="#1-URL配置" class="headerlink" title="1. URL配置"></a>1. URL配置</h5><p><img src="/images/pasted-2.png" alt="upload successful"></p><a id="more"></a><p><img src="/images/pasted-1.png" alt="upload successful"></p><h5 id="2-ORM模型"><a href="#2-ORM模型" class="headerlink" title="2. ORM模型"></a>2. ORM模型</h5><p><img src="/images/pasted-0.png" alt="upload successful"></p><hr><h5 id="3-管理类继承"><a href="#3-管理类继承" class="headerlink" title="3. 管理类继承"></a>3. 管理类继承</h5><p><img src="/images/pasted-3.png" alt="upload successful"></p><hr><h5 id="4-urls匹配"><a href="#4-urls匹配" class="headerlink" title="4. urls匹配"></a>4. urls匹配</h5><p><img src="/images/pasted-4.png" alt="upload successful"></p><hr><h5 id="5-ajax请求"><a href="#5-ajax请求" class="headerlink" title="5. ajax请求"></a>5. ajax请求</h5><p><img src="/images/pasted-5.png" alt="upload successful"></p><hr><h5 id="6-CSRF攻击"><a href="#6-CSRF攻击" class="headerlink" title="6. CSRF攻击"></a>6. CSRF攻击</h5><p><img src="/images/pasted-8.png" alt="upload successful"></p><hr><h5 id="7-Cookie-amp-session"><a href="#7-Cookie-amp-session" class="headerlink" title="7. Cookie&amp;session"></a>7. Cookie&amp;session</h5><h6 id="1-Cookie"><a href="#1-Cookie" class="headerlink" title="1. Cookie"></a>1. Cookie</h6><p><img src="/images/pasted-6.png" alt="upload successful"></p><h6 id="2-session"><a href="#2-session" class="headerlink" title="2. session"></a>2. session</h6><p><img src="/images/pasted-7.png" alt="upload successful"></p><hr><h5 id="8-防范CSRF攻击方法"><a href="#8-防范CSRF攻击方法" class="headerlink" title="8. 防范CSRF攻击方法"></a>8. 防范CSRF攻击方法</h5><p><img src="/images/pasted-16.png" alt="upload successful"></p><hr><h5 id="9-调用中间件"><a href="#9-调用中间件" class="headerlink" title="9. 调用中间件"></a>9. 调用中间件</h5><p><img src="/images/pasted-17.png" alt="upload successful"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>python_Mysql操作之坑</title>
      <link href="/2019/12/14/python-Mysql%E6%93%8D%E4%BD%9C%E4%B9%8B%E5%9D%91/"/>
      <url>/2019/12/14/python-Mysql%E6%93%8D%E4%BD%9C%E4%B9%8B%E5%9D%91/</url>
      
        <content type="html"><![CDATA[<h4 id="python在直接插入mysql时内容带有引号会报错"><a href="#python在直接插入mysql时内容带有引号会报错" class="headerlink" title="python在直接插入mysql时内容带有引号会报错"></a>python在直接插入mysql时内容带有引号会报错</h4><p>处理方法：</p><p>1.使用pymysql的一个方法自动转义可避坑</p><p><strong>pymysql.escape_string(str)</strong></p><p>*<em>str填要转义的字符 *</em></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">insert_dialogues_sql = <span class="string">"INSERT INTO dialogues(`movie_id`,`ccontent`,`econtent`,`start_time`,`created_at`)</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="string"></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="string">VALUES('%s','%s','%s','%s','%s')"</span> % (movie_id, pymysql.escape_string(ccontent),</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">pymysql.escape_string(econtent),<span class="string">'0'</span>,created_at)</span></pre></td></tr></table></figure><p>2.使用转义字符咯</p><p>个人不喜</p>]]></content>
      
      
      <categories>
          
          <category> mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JaveScript</title>
      <link href="/2019/12/12/JaveScript/"/>
      <url>/2019/12/12/JaveScript/</url>
      
        <content type="html"><![CDATA[<h4 id="1-JavaScript嵌入页面的方式"><a href="#1-JavaScript嵌入页面的方式" class="headerlink" title="1. JavaScript嵌入页面的方式"></a>1. JavaScript嵌入页面的方式</h4><p>1.行间事件（主要用于事件）</p><p><code>&lt;input type=&quot;button&quot; name=&quot;&quot; onclick=&quot;alert(&#39;ok！&#39;);&quot;&gt;</code></p><p>2.页面script标签嵌入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">&lt;script type&#x3D;&quot;text&#x2F;javascript&quot;&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">    alert(&#39;ok！&#39;);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">&lt;&#x2F;script&gt;</span></pre></td></tr></table></figure><p>3.外部引入</p><p><code>&lt;script type=&quot;text/javascript&quot; src=&quot;js/index.js&quot;&gt;&lt;/script&gt;</code></p><p><strong>script和htmlxie写在同一html里（script写在body之前），要用window.onload d = function()加载渲染</strong></p><a id="more"></a><h4 id="2-变量类型"><a href="#2-变量类型" class="headerlink" title="2. 变量类型"></a>2. 变量类型</h4><p>JavaScript 是一种弱类型语言，javascript的变量类型由它的值来决定。 定义变量需要用关键字 ‘var’</p><h6 id="5种基本数据类型："><a href="#5种基本数据类型：" class="headerlink" title="5种基本数据类型："></a>5种基本数据类型：</h6><p>1 number 数字类型</p><p>2、string 字符串类型</p><p>3、boolean 布尔类型 true 或 false</p><p>4、undefined undefined类型，变量声明未初始化，它的值就是undefined</p><p>5、null null类型，表示空对象，如果定义的变量将来准备保存对象，可以将变量初始化为null,在页面上获取不到对象，返回的值就是null</p><h6 id="1种复合类型："><a href="#1种复合类型：" class="headerlink" title="1种复合类型："></a>1种复合类型：</h6><p>object</p><h6 id="变量、函数、属性、函数参数命名规范"><a href="#变量、函数、属性、函数参数命名规范" class="headerlink" title="变量、函数、属性、函数参数命名规范"></a>变量、函数、属性、函数参数命名规范</h6><p>1、区分大小写<br>2、第一个字符必须是字母、下划线（_）或者美元符号（$）<br>3、其他字符可以是字母、下划线、美元符或数字</p><h6 id="匈牙利命名风格："><a href="#匈牙利命名风格：" class="headerlink" title="匈牙利命名风格："></a>匈牙利命名风格：</h6><p>对象o Object 比如：oDiv<br>数组a Array 比如：aItems<br>字符串s String 比如：sUserName<br>整数i Integer 比如：iItemCount<br>布尔值b Boolean 比如：bIsComplete<br>浮点数f Float 比如：fPrice<br>函数fn Function 比如：fnHandler<br>正则表达式re RegExp 比如：reEmailCheck</p><h4 id="3-操作元素属性"><a href="#3-操作元素属性" class="headerlink" title="3.操作元素属性"></a>3.操作元素属性</h4><p>获取的页面元素，就可以对页面元素的属性进行操作，属性的操作包括属性的读和写。</p><p>操作属性的方法<br>1、“.” 操作<br>2、“[ ]”操作</p><p>属性写法</p><p>1、html的属性和js里面属性写法一样<br>2、“class” 属性写成 “className”<br>3、“style” 属性里面的属性，有横杠的改成驼峰式，比如：“font-size”，改成”style.fontSize”</p><h4 id="4-条件语句"><a href="#4-条件语句" class="headerlink" title="4.条件语句"></a>4.条件语句</h4><p>通过条件来控制程序的走向，就需要用到条件语句。</p><p>运算符<br>1、算术运算符： +(加)、 -(减)、 *(乘)、 /(除)、 %(求余)</p><p>2、赋值运算符：=、 +=、 -=、 *=、 /=、 %=<br>3、条件运算符：==、===、&gt;、&gt;=、&lt;、&lt;=、!=、&amp;&amp;(而且)、||(或者)、!(否)</p><h4 id="5-数组及操作方法"><a href="#5-数组及操作方法" class="headerlink" title="5.数组及操作方法"></a>5.数组及操作方法</h4><p>1、获取数组的长度：aList.length;</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">var aList &#x3D; [1,2,3,4];</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">alert(aList.length); &#x2F;&#x2F; 弹出4</span></pre></td></tr></table></figure><p>2、用下标操作数组的某个数据：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">aList[0];</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">var aList &#x3D; [1,2,3,4];</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">alert(aList[0]); &#x2F;&#x2F; 弹出1</span></pre></td></tr></table></figure><p>3、join() 将数组成员通过一个分隔符合并成字符串</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">var aList &#x3D; [1,2,3,4];</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">alert(aList.join(&#39;-&#39;)); &#x2F;&#x2F; 弹出 1-2-3-4</span></pre></td></tr></table></figure><p>4、push() 和 pop() 从数组最后增加成员或删除成员</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">var aList &#x3D; [1,2,3,4];</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">aList.push(5);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">alert(aList); &#x2F;&#x2F;弹出1,2,3,4,5</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">aList.pop();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">alert(aList); &#x2F;&#x2F; 弹出1,2,3,4</span></pre></td></tr></table></figure><p>5、unshift()和 shift() 从数组前面增加成员或删除成员</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">var aList &#x3D; [1,2,3,4];</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">aList.unshift(5);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">alert(aList); &#x2F;&#x2F;弹出5,1,2,3,4</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">aList.shift();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">alert(aList); &#x2F;&#x2F; 弹出1,2,3,4</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">6、reverse() 将数组反转</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">var aList &#x3D; [1,2,3,4];</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">aList.reverse();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">alert(aList);  &#x2F;&#x2F; 弹出4,3,2,1</span></pre></td></tr></table></figure><p>7、indexOf() 返回数组中元素第一次出现的索引值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">var aList &#x3D; [1,2,3,4,1,3,4];</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">alert(aList.indexOf(1));</span></pre></td></tr></table></figure><p>8、splice() 在数组中增加或删除成员</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">var aList &#x3D; [1,2,3,4];</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">aList.splice(2,1,7,8,9); &#x2F;&#x2F;从第2个元素开始，删除1个元素，然后在此位置增加&#39;7,8,9&#39;三个元素</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">alert(aList); &#x2F;&#x2F;弹出 1,2,7,8,9,4</span></pre></td></tr></table></figure><p>多维数组<br>多维数组指的是数组的成员也是数组的数组。</p><h4 id="6-调试程序的方法"><a href="#6-调试程序的方法" class="headerlink" title="6.调试程序的方法"></a>6.调试程序的方法</h4><p>1、alert</p><p>2、console.log</p><p>3、document.title</p>]]></content>
      
      
      <categories>
          
          <category> HTML </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTML </tag>
            
            <tag> JaveScipt </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第一天</title>
      <link href="/2019/12/10/%E7%AC%AC%E4%B8%80%E5%A4%A9/"/>
      <url>/2019/12/10/%E7%AC%AC%E4%B8%80%E5%A4%A9/</url>
      
        <content type="html"><![CDATA[<p>have a good night!</p>]]></content>
      
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
